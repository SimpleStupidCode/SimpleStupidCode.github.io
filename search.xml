<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nju-os-lab-南京大学os实验-实验环境vscode搭建与调试</title>
      <link href="/post/2022062501.html"/>
      <url>/post/2022062501.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-实验环境说明"><a href="#1-实验环境说明" class="headerlink" title="1 实验环境说明"></a>1 实验环境说明</h2><p>​    我本人用的是 windows11 + wsl2 + ubuntu20.04<br>我的机器用的windows11环境  主要是 高版本的windows 已经完美集成了wslg<br>WSLg是Windows Subsystem for Linux GUI的缩写，该项目的目的是在完全集成的桌面体验中支持在Windows上运行Linux GUI应用程序（X11和Wayland）。</p><h2 id="2-wsl2安装"><a href="#2-wsl2安装" class="headerlink" title="2 wsl2安装"></a>2 wsl2安装</h2><p>   我是直接在应用商店进行搜索wsl安装的，直接安装到默认的C盘，确实会占不少空间，<br>个人还是建议最好不要挪动安装位置，因为移动到其他盘后指不定会有什么路径问题。<br>安装完成后最好升级下wsl  执行命令  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wsl  --update</span><br></pre></td></tr></table></figure><p>同时进入linux后 更新一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update    </span><br><span class="line">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="3-gtk-安装"><a href="#3-gtk-安装" class="headerlink" title="3 gtk 安装"></a>3 gtk 安装</h2><p>我们安装的linux是20.04版本的，可以用查看linux 版本信息 cat &#x2F;etc&#x2F;os-release<br>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libgtk-3-0</span><br><span class="line">$ sudo apt-get install libgtk-3-dev</span><br></pre></td></tr></table></figure><p>查看安装情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pkg-config --cflags --libs gtk+-3.0</span><br></pre></td></tr></table></figure><p>安装成功效果如下：</p><img src="/post/2022062501/001-16561574866261.jpg" class><h2 id="4-gtk-测试"><a href="#4-gtk-测试" class="headerlink" title="4 gtk 测试"></a>4 gtk 测试</h2><p> <a href="https://www.gtk.org/docs/getting-started/hello-world/">官网demo</a><br>官网的demo是gtk-4的示例，示例中 gtk_window_set_child 在gtk-3的版本中不适用，需要把这个有关代码注释掉。<br>因为我们用的gtk-3的版本  所以gcc的编译命令不能用官网gtk4的版本<br>而且3版本中没有gtk_window_set_child 这个函数 把实例中代码 gtk_window_set_child (GTK_WINDOW (window), button); 注释掉就行。</p><p> <a href="https://docs.gtk.org/gtk3/compiling.html">gtk3 API文档</a>  </p><p>任意目录新建 hello-world-gtk.c 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;gtk/gtk.h&gt;</span></span><br><span class="line"></span><br><span class="line">static void</span><br><span class="line">print_hello (GtkWidget *widget,</span><br><span class="line">             gpointer   data)</span><br><span class="line">&#123;</span><br><span class="line">  g_print (<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void</span><br><span class="line">activate (GtkApplication *app,</span><br><span class="line">          gpointer        user_data)</span><br><span class="line">&#123;</span><br><span class="line">  GtkWidget *window;</span><br><span class="line">  GtkWidget *button;</span><br><span class="line"></span><br><span class="line">  window = gtk_application_window_new (app);</span><br><span class="line">  gtk_window_set_title (GTK_WINDOW (window), <span class="string">&quot;Window&quot;</span>);</span><br><span class="line">  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);</span><br><span class="line"></span><br><span class="line">  button = gtk_button_new_with_label (<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  g_signal_connect (button, <span class="string">&quot;clicked&quot;</span>, G_CALLBACK (print_hello), NULL);</span><br><span class="line">  // gtk_window_set_child (GTK_WINDOW (window), button);</span><br><span class="line"></span><br><span class="line">  gtk_window_present (GTK_WINDOW (window));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">main (int    argc,</span><br><span class="line">      char **argv)</span><br><span class="line">&#123;</span><br><span class="line">  GtkApplication *app;</span><br><span class="line">  int status;</span><br><span class="line"></span><br><span class="line">  app = gtk_application_new (<span class="string">&quot;org.gtk.example&quot;</span>, G_APPLICATION_FLAGS_NONE);</span><br><span class="line">  g_signal_connect (app, <span class="string">&quot;activate&quot;</span>, G_CALLBACK (activate), NULL);</span><br><span class="line">  status = g_application_run (G_APPLICATION (app), argc, argv);</span><br><span class="line">  g_object_unref (app);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译命令<br>gcc `pkg-config –cflags gtk+-3.0` hello-world-gtk.c `pkg-config –libs gtk+-3.0` （不要删除这个命令中的引号）</p><p>运行编译结果，出现如下效果就是安装成功了。</p><img src="/post/2022062501/image-20220625195431145.png" class title="gtk测试"><h2 id="5-qemu安装"><a href="#5-qemu安装" class="headerlink" title="5 qemu安装"></a>5 qemu安装</h2><p>踩坑地方，主要就是gtk的图形库支持，如果没有安装gtk，在运行实验代码，没有图形界面，而且ubuntu中安装的gedit 等编辑器也不能打开图形界面。<br>安装教程可参考：</p><p>下载地址 <a href="https://www.qemu.org/download/">https://www.qemu.org/download/</a> </p><p>参考 <a href="https://zhuanlan.zhihu.com/p/37329713">https://zhuanlan.zhihu.com/p/37329713</a>  </p><p>需要安装ninja 命令如下</p><p>sudo apt-get install ninja-build</p><p>需要注意的是我们需要在bin目录下将生的文件安装到系统上执行 make install</p><h2 id="6-下载实验代码L0分支-不需要改任何代码。"><a href="#6-下载实验代码L0分支-不需要改任何代码。" class="headerlink" title="6 下载实验代码L0分支 不需要改任何代码。"></a>6 下载实验代码L0分支 不需要改任何代码。</h2><p>这里使用vscode配置踩坑有点多。</p><ul><li><p><strong>6.1 下载好代码后 编译代码时 会报错缺少头文件bits&#x2F;libc-header-start.h</strong><br>执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-multilib</span><br></pre></td></tr></table></figure></li><li><p><strong>6.2  构建项目生成 compile_commands.json，</strong></p></li></ul><p>关于这个文件的作用自行 STFW ，可参考jyy 老师os实验课2022版本的第18讲 《Xv6 代码导读》 感兴趣的同学可以回顾下，老师课上讲了不少干货的。有一点确实说到我的心坎里了，之前做PA实验时，很想用vscode来开发，怎奈何不会配置实验环境，用的残缺版的vscode，当真是难受的一批。在看完jyy的第18讲课之后，我决定一定要自己把这个实验环境在vscode中配置好。下图是刚下载完成代码用vscode打开对应目录文件时截图。<br>(如果说你的项目中有宏没有识别导致工程大面积报错，请查看你的这个complie_commands.json文件中 是否有这些源码文件的编译信息)</p><img src="/post/2022062501/image-20220625201933192.png" class><p>下面是配置好的效果图</p><img src="/post/2022062501/image-20220625202619387.png" class><ul><li><p><strong>6.3  操作如下</strong></p></li><li><p><strong>6.3.1</strong> 修改makefile 关闭git提交</p><img src="/post/2022062501/image-20220625202904664.png" class></li><li><p><strong>6.3.2 添加编译调试信息</strong></p><p>阅读makefile的编译信息可以知晓 L0 源码的编译参数，或者使用命令make -nB 查看</p><img src="/post/2022062501/image-20220625203220821.png" class title="image-20220625203220821"></li><li><p><strong>6.3.3 生成 compile_commands.json</strong></p><p>在项目的amgame目录下执行命令  bear make 会自动生成 compile_commands.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bear make</span><br></pre></td></tr></table></figure><p>bear指令原理很简单  jyy在第18讲课程中说的很明白了，这里不再赘述。</p><p>需要外说明的的，在amgame目录下，如果之前应执行过make命令后，再次执行 make clean 时，make clean 指令只删除了amgame目录下build目录，而没有删除abstract-mechine 目录下build目录，所以之后执行make指令 只会编译构建amgame目录，这样我们的bear make指令 生成的 compile_commands.json 文件中 编译信息是不完整的。</p><p>解决办法很简单，就是手动删除amgame目录下的bulid 目录后再执行 bear make 指令。</p><p>生成compile_commands.json文件后，可以与make -nB命令对照下是否完整。</p><img src="/post/2022062501/image-20220626003508773.png" class title="image-20220626003508773"></li><li><p><strong>6.4 配置vscode c_cpp_properties.json文件 使得compile_commands.json 生效</strong></p><img src="/post/2022062501/image-20220625204426634.png" class title="image-20220625204426634"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Linux&quot;,</span><br><span class="line">            &quot;includePath&quot;: [</span><br><span class="line">                &quot;$&#123;workspaceFolder&#125;/**&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;defines&quot;: [],</span><br><span class="line">            &quot;compilerPath&quot;: &quot;/usr/bin/gcc&quot;,</span><br><span class="line">            &quot;cStandard&quot;: &quot;gnu17&quot;,</span><br><span class="line">            &quot;cppStandard&quot;: &quot;c++17&quot;,</span><br><span class="line">            &quot;intelliSenseMode&quot;: &quot;linux-gcc-x64&quot;, //   &quot;linux-gcc-x64&quot;,</span><br><span class="line">            // compile_commands.json 生成命令(在amgame目录下) &gt; brea make</span><br><span class="line">            &quot;compileCommands&quot;: &quot;$&#123;workspaceFolder&#125;/amgame/compile_commands.json&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>6.5 配置launch.json  tasks.json</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;amgame&quot;, //名称随便取</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;, //调试类型 （java python 用别的类型 具体值没查）</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;, //请求配置类型</span><br><span class="line">            &quot;miDebuggerServerAddress&quot;: &quot;127.0.0.1:1234&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;/usr/apt/nju/os/amgame/build/amgame-x86_64-qemu.elf&quot;, //可执行程序完整路径（包含程序名称）</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;/usr/apt/nju/os/amgame/build&quot;, //可执行程序完整路径（不包含程序名称）</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: false, </span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;miDebuggerPath&quot;:  &quot;/usr/bin/gdb&quot;,   //gdb完整路径    &quot;/usr/bin/gdb-multiarch&quot;  </span><br><span class="line">            // tasks.json 中make 和make run 不能同时执行 git 文件锁冲突</span><br><span class="line">            &quot;preLaunchTask&quot;:  &quot;build-all&quot; // &quot;build-all&quot; // 第一次开始调试的任务  执行makefile进行构建项目，见task.json</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>6.6 配置  tasks.json  手动新建这个文件就行</strong></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // See https://go.microsoft.com/fwlink/?LinkId=733558</span><br><span class="line">    // for the documentation about the tasks.json format</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;options&quot;: &#123;</span><br><span class="line">        // 这里指定tasks 的运行目录，默认是$&#123;workspaceRoot&#125;，也就是.vscode/..</span><br><span class="line">        &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;/amgame&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            // 这个是测试使用的demo</span><br><span class="line">            &quot;label&quot;: &quot;echo&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;echo $&#123;workspaceFolder&#125;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;clean&quot;, // 任务名称</span><br><span class="line">            &quot;command&quot;: &quot;make&quot;, // 命令</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;clean&quot;</span><br><span class="line">            ], // 相当于make clean</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;build&quot;, // 任务名称</span><br><span class="line">            &quot;command&quot;: &quot;make&quot;, // 命令</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;run&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;make&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;run&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            // &quot;problemMatcher&quot;: &quot;$tsc-watch&quot;,  官网给出的指示不好用</span><br><span class="line">            // https://stackoverflow.com/questions/44242048/how-to-make-vscode-not-wait-for-finishing-a-prelaunchtask</span><br><span class="line">            // 还是stackoverflow给力呀</span><br><span class="line">            &quot;problemMatcher&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;pattern&quot;: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;regexp&quot;: &quot;.&quot;,</span><br><span class="line">                            &quot;file&quot;: 1,</span><br><span class="line">                            &quot;location&quot;: 2,</span><br><span class="line">                            &quot;message&quot;: 3</span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;background&quot;: &#123;</span><br><span class="line">                        &quot;activeOnStart&quot;: true,</span><br><span class="line">                        &quot;beginsPattern&quot;: &quot;.&quot;,</span><br><span class="line">                        &quot;endsPattern&quot;: &quot;.&quot;,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;isBackground&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; // 依次调试多个任务，若不配置此，则每次launch只会启动一个任务。</span><br><span class="line">            &quot;label&quot;: &quot;build-all&quot;,</span><br><span class="line">            // 这里也踩坑了，不加的话顺寻会乱</span><br><span class="line">            &quot;dependsOrder&quot;: &quot;sequence&quot;,</span><br><span class="line">            &quot;dependsOn&quot;: [</span><br><span class="line">                &quot;echo&quot;,</span><br><span class="line">                &quot;clean&quot;,</span><br><span class="line">                &quot;build&quot;,</span><br><span class="line">                &quot;run&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>6.7 修改qemu启动参数</strong></p><img src="/post/2022062501/image-20220625205235886.png" class title="image-20220625205235886"></li><li><p><strong>6.8 打断点开启调试</strong></p><p><img src="/post/nju-os-lab-%E5%8D%97%E4%BA%AC%E5%A4%A7%E5%AD%A6os%E5%AE%9E%E9%AA%8C-%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83vscode%E6%90%AD%E5%BB%BA%E4%B8%8E%E8%B0%83%E8%AF%95/image-20220625204846686.png" alt="image-20220625204846686"></p></li></ul><p>F5开启调试</p><img src="/post/2022062501/image-20220625205008074.png" class title="image-20220625205008074"><p>效果图</p><img src="/post/2022062501/image-20220625205049225.png" class title="image-20220625205049225"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1 踩坑点</p><ul><li><p>bear make 指令生成的compile_commands.json 收集的指令不全，导致amgame目录 中am.h中宏信息ARCH_H始终无法识别 ，当然整个abstract-mechine的所有源码 都不能很好的编译。</p></li><li><p>关于F5直接启动调试，主要是最后一条make run指令要再后台执行，哎，要实现一键启动必须在 tasks.json中配置problemMatcher isBackground 这两个参数，</p><p>想要实现一键启动调试，这里确实让我花了不少心思。（因为jyy在课上演示代码时就是一键开启调试，所以我相信一定是由解决办法的），关于problemMatcher 参数的详细作用我没研究，有知道的小伙伴可以留言说下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&quot;problemMatcher&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;pattern&quot;: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;regexp&quot;: &quot;.&quot;,</span><br><span class="line">                            &quot;file&quot;: 1,</span><br><span class="line">                            &quot;location&quot;: 2,</span><br><span class="line">                            &quot;message&quot;: 3</span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;background&quot;: &#123;</span><br><span class="line">                        &quot;activeOnStart&quot;: true,</span><br><span class="line">                        &quot;beginsPattern&quot;: &quot;.&quot;,</span><br><span class="line">                        &quot;endsPattern&quot;: &quot;.&quot;,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">&quot;isBackground&quot;: true</span><br></pre></td></tr></table></figure></li></ul><p>2  整个实验环境搭建完成后，对于整个实验框架代码的执行流程就有了初步认知了，以后vscode编译大型C项目的配置也可参照这篇文章。实验代码的细节实现还没来得及看，当然我们的环境已经完成了，俗话说万事开头难，既然决定了要学os 就对自己要求高点吧。（jyy老师说的）</p>]]></content>
      
      
      <categories>
          
          <category> 南京大学 os实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oslab </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>